* Javascript Assignment: Goal
This is an assignment for [[http://digital.hackinghistory.ca][Digital History]], a digital humanities course taught in the History Department at the University of Toronto.  If you're a teacher, feel free to fork and repurpose for your own courses.  If you're a student, keep reading!

You do not have to become a coder to do well in this course.  However, you /will/ have to be willing to explore technical skills that you might not otherwise develop as a humanities scholar.  In this assignment, you will learn /very basic/ javascript coding skills and apply them to a few simple problems. The goal of the assignment is to provide you with basic technical knowledge that you will need for later assignments.  

* Expectations
This assignment is graded pass/fail. You will only get credit if *all of your code runs as required.* To pass the assignment, you must:
- successfully fork this repository and clone a local copy
- complete at least the first two parts of this assignment (plus the third part if you hope to get an A in the class), such that both the student-visible tests and the instructor/machine-visible tests all pass.
- commit your work to git as you go, so that a query of the git history will show multiple steps. Please note that git commits are timestamped and unique; they are an excellent defense against accusations of cheating, so please use them extensively. Tests will fail unless you make at least 6 commits to the repository.
- push all your changes to Github
- submit your assignment via Github Pull Request

* Details

Create a fork of this repository by [[https://classroom.github.com/a/y1HlCM6k][following this link]].  Clone locally via the "Clone or Download" process discussed in [[https://github.com/DigitalHistory/Github][your first assignment]] and [[https://help.github.com/articles/cloning-a-repository/][described here]], and do your work in Atom. 

Web pages are composed of three components:  HTML, CSS, and Javascript.  HTML provides the /structure and content/ of a web page; CSS controls the /style of presentation/; and Javascript permits /dynamic modification/ of both.  In this assignment, we explore the first two components, HTML and CSS 
** Part 1 - Javascript in the Console  
For Javascript, we will use the excellent online book [[http://eloquentjavascript.net/][Eloquent Javascript]] as a resourcetextbook. Read Chapters 1-4 and, importantly, *do all the exercises* using [[http://eloquentjavascript.net/code/][the code sandbox]] or some other sandbox environment, such as the [[https://atom.io/packages/atom-js-console][Atom JS Console]] or the [[https://developer.mozilla.org/en-US/docs/Tools/Scratchpad][amazing Firefox Scratchpad tool]].  Some of the discussion i n the book, especially in chapter 3, may be hard to follow. The exercises may also be quite hard. It is fair to give up and look at the solutions; but be sure you understand the solutions once you've looked at them.

Let me stress this strongly: you almost certainly will not be able to do the exercises without doing the reading.  

Once you have read the textbook and done the exercises, you should find this part of the assignment very straightforward. Complete the code in [[./Part1/01-functions-and-variables.js and ./Part2/-2-objects-tests-loops.js]] according to the instruction-comments in those file.  Check your code by testing it in the [[http://eloquentjavascript.net/code/][EJ code sandbox]], [[https://developer.mozilla.org/en/docs/Tools/Scratchpad][Firefox Scratchpad]], or the [[https://developers.google.com/web/tools/chrome-devtools/debug/console/][Chrome console]].  I have written tests for you which will produce the appropriate output when your code is correct.  



** Part 2 - Javascript in the Browser
Continue to read /Eloquent Javascript/, this time chapters [[http://www.eloquentjavascript.net/12_browser.html][12]] and [[http://eloquentjavascript.net/13_dom.html][13]]. Again, read the chapters and do the exercises; if the exercises are too hard, look at the answers but *be sure you understand them*.  

[[./Part2/index.html]] is a very simple html file that contains a table of prime ministers.  Your task is write one or more functions that will *add links to the Wikipedia pages of all the prime ministers*.  

Look at the structure of the table. Each row looks like this:

#+BEGIN_SRC html
      <tr>
        <td class="PM">John Sparrow David Thompson</td>
        <td class="Party">Conservative</td>
        <td class="From">1892</td>
        <td class="To">1894</td>
      </tr>
#+END_SRC

Your code should change that to this:
#+BEGIN_SRC html
      <tr>
        <td class="PM"><a href="https://en.wikipedia.org/wiki/John_Sparrow_David_Thompson">John Sparrow David Thompson</a></td>
        <td class="Party">Conservative</td>
        <td class="From">1892</td>
        <td class="To">1894</td>
      </tr>

#+END_SRC

Rather than asking you to include your code directly in ~index.html~, I have provided a script tag at the end of the file which loads the file ~ministers.js~. After the page has loaded completedly, the function ~updatePage()~ will run; your job is to make sure that updatePage() does what it's supposed to.  

There is some template code in that file already; complete the template and test your code by (re)loading index.html in your browser. You can also use the built-in tests (see below).

*Hints:* In this exercise we are beginning to actually do a form of digital history. Notice that we are treating /text/ as /data/: transforming names into "pointers" that give us access to further information.  

This is made possible because the webpage itself is already well-structured.  Notice the class attribute on each ~<td>~ element:
#+BEGIN_SRC html
<td class="PM">John Sparrow David Thompson</td>
#+END_SRC

Now, consider the structure of Wikipedia links:

#+BEGIN_SRC html
https://en.wikipedia.org/wiki/John_Sparrow_David_Thompson
#+END_SRC

Note they always consist of "https://en.Wikipedia.org/wiki/" + A_Name_With_Spaces_Replaced_By_Underscores.  But, lucky you, /Wikipedia will rewrite spaces as underscores for you!/ If you would like to try to do that part yourself, take a look at [[http://www.w3schools.com/jsref/jsref_replace.asp][the Javascript string replace method]].  

We will use skills developed in the exercises from chapter 13. Your function will have to:
- /find and collect/ all the elements with the class "PM". The method you will need to use is mentioned only once in chapter 13, under "Finding Elements."
- /clear/ the existing text node.
- /add a child node/ of type "a" with text content that comes from the original content, and a link that is constructed of the Wikipedia address prefix + the original content.  

If you find this is too easy: wikify *all* the fields in each row.  Now click on the "party" links. What could you do to fix them? Also, can you change the background color of one or more classes? 

*One more challenge for the eager.* Right now, the wiki links are added immediately when the page loads. Can you defer adding the links until a button is clicked? You will need to add a button element with an "onClick" attribute to index.html, and move the /execution/ of ~updatePage()~ out of the page load and into the button.  

P.S. -- you may find it useful or interesting to look at the script I used to generate the table. You will find it in [[./Part2/make-minister-table.js]]

** Part 3: Reflection
*If and only if you are aiming to achieve an A in the course*, you must also complete the Reflection section of the assignment. As before, copy the file [[./Reflection/reflection-template.md]] to ~Reflection/yourgithubid.md~, again replacing `yourgithubid` with your actual Github ID.  Follow the directions in the file. 

** Tests
As in our other assignments, this one conmes with a set of bundled tests designed to make your life a little easier.  To run them, first execute ~npnm install -d~ from this directory. Then run ~npm run test~ or, to watch the directory continuously, ~npm run watch~
* Handing in

As mentioned above: when you are finished -- when your code passes all the tests -- submit your code via pull request.  This is the only acceptable submission process!
